Question:
Your task is to construct a tower in N days by following these conditions: 
-> Every day you are provided with one disk of distinct size.
-> The disk with larger sizes should be placed at the bottom of the tower.
-> The disk with smaller sizes should be placed at the top of the tower.

The order in which tower must be constructed is as follows:
-> You cannot put a new disk on the top of the tower until all the larger disks that are given to you get placed.

Print N lines denoting the disk sizes that can be put on the tower on the ith day.


Solution:
import java.util.*;

 

class MyComparator implements Comparator

{

    public int compare(Object obj1,Object obj2)

    {

     Integer i1=(Integer)obj1;

     Integer i2=(Integer)obj2;

     return i2.compareTo(i1);

    }

}

public class DiskTower 

{

    public static void main(String[] args)  

    {

     Scanner sc=new Scanner(System.in);

     int n=sc.nextInt();

     int max=n;

     Queue<Integer> queue=new PriorityQueue<Integer>(new MyComparator());

     int disks[]=new int[n];

     for(int i=0;i<n;i++)

     {

      disks[i]=sc.nextInt();

      queue.add(disks[i]);

      while(!queue.isEmpty() && queue.peek()==max)

        {

   

          System.out.print(queue.poll() + " ");

          max--;

        }

   

      System.out.println();

      }

   }

 

}
